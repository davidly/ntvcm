; Z80 version of an app that proves you can't win at tic-tac-toe
;
; copy / assemble, link, and run for cp/m using:
; zmac -z --od . tttz80.src
; ntvcm s:\cpm\load tttz80
;
; The board positions:
;   0 1 2
;   3 4 5
;   6 7 8
;

; cp/m-specific constants

BDOS EQU            5         ; where to call to invoke bdos
BdosDisplayChar EQU 2         ; c register function to print a character
BdosPrintString EQU 9         ; c register function to print a $ terminated string

DefaultLoops  equ     1     ; default # of times to run (max 32767)
MaxScore      equ     9     ; maximum score
MinScore      equ     2     ; minimum score
WinScore      equ     6     ; winning score
TieScore      equ     5     ; tie score
LoseScore     equ     4     ; losing score
XPiece        equ     1     ; X move piece
OPiece        equ     2     ; Y move piece
BlankPiece    equ     0     ; empty move piece
TailCount     equ     128   ; where the # of bytes in the command tail is located

  aseg
  org   100h

        ld      hl, DefaultLoops
        ld      (Loops), hl

        ld      a, (TailCount)         ; was there a command-line argument?
        cp      0
        jp      z, Again            ; if not, use the default value for Loops
        ld      d, 0                ; get ready to null-terminate the string
        ld      e, a                ; # of characters
        ld      hl, TailCount + 1   ; start of the string
        add     hl, de              ; now hl points just beyond the argument
        ld      (hl), 0             ; null-terminate the tail string
        ld      hl, TailCount + 1   ; convert the tail string in hl to a number in hl
        call    atou                ; null-terminated string in hl => unsigned integer in hl
        ld      (Loops), hl         ; store the value for use in the loop below

        ld      a, l                ; if they asked for 0 or it wasn't a number, do nothing
        cp      0
        jp      nz, Again
        ld      a, h
        cp      0
        jp      nz, Again
        ld      hl, StringInvalidArg      ; the value is 0 then so show an error and exit
        call    DisplayString
        ld      hl, CRLF
        call    DisplayString
        jp      0                    

  Again:
        ld      ix, 0               ; ix contains the global depth

        ld      hl, 0
        ld      (Moves), hl         ; reset the move count each iteration to avoid overflow

        ld      a, 0                
        call    RunMinMax           ; first of 3 unique board configurations

        ld      a, 1
        call    RunMinMax           ; second

        ld      a, 4
        call    RunMinMax           ; third
                                 
        ld      hl, (Iterations)    ; increment iteration count
        inc     hl
        ld      (Iterations), hl

        ld      bc, (Loops)         ; check if the iteration count has reached Loops
        ld      a, b
        cp      h
        jp      nz, Again
        ld      a, c
        cp      l
        jp      nz, Again

        ld      hl, StringMoves
        call    DisplayString
        ld      hl, (Moves)
        call    DisplayHL
        ld      hl, CRLF
        call    DisplayString

        ld      hl, StringIterations
        call    DisplayString
        ld      hl, (Loops)
        call    DisplayHL
        ld      hl, CRLF
        call    DisplayString

        jp      0                   ; cp/m call to terminate the app

RunMinMax:                          ; Run the MINMAX function for a given first move
        ld      b, 0                ; store the first move
        ld      c, a
        ld      hl, Board
        add     hl, bc
        ld      (hl), XPiece
        push    hl                  ; save the pointer to the move location for later

        ld      d, 0
        ld      e, a
        push    de                  ; push the move location and (unused) value

        ld      b, MinScore         ; alpha
        ld      c, MaxScore         ; beta
        push    bc

        call    MinMaxMinimize

        pop     de                  ; clean up the stack
        pop     de                  ; clean up the stack

        pop     hl                  ; restore the move location
        ld      (hl), BlankPiece    ; restore a blank on the board

        ret

; arguments on the stack:
;   (iy + 0)         ; beta   
;   (iy + 1)         ; alpha
;   (iy + 2)         ; move (for caller's safekeeping only) in e on entry
;   (iy + 3)         ; value of parent (for caller's safekeeping only) in d on entry
; register usage:
;   d: value local best score so far
;   e: argument on entry: the most recent move. Later, i (0..8)
;  iy: base pointer for this stack frame
;  ix: global depth
;  hl: temporary until the Loop where it points to the board position of the next (potential) move

MinMaxMaximize:                     ; the recursive scoring function. defer frame creation until needed
        ld      hl, (Moves)         ; no 16-bit memory increment, so load in hl for that
        inc     hl
        ld      (Moves), hl

;        ld      a, ixl              ; load depth in a
injectcode1: db 0ddh, 07dh

        cp      4                   ; DEPTH - 4  (if 4 or fewer pieces played, no possible winner)
        jp      m, MaxSkipWin
      
        ld      a, e                ; where the move was taken 0..8
        ld      b, OPiece           ; the piece that took the move
        call    CallScoreProc       ; look for a winning position

        cp      OPiece              ; see if O won
        ld      a, LoseScore        ; losing score. avoid branch by always loading
        ret     z

  MaxSkipWin:
        push    iy                  ; save caller's stack frame
        ld      iy, 4               ; 2 to skip past the return address, 2 for old iy
        add     iy, sp

        ld      d, MinScore         ; value initialized
        ld      e, 0ffh             ; the variable I will go from 0..8
        ld      hl, Board - 1
        inc     ix                  ; increment depth

  MaxLoop:
        ld      a, e
        cp      8
        jp      z, MaxLoadValue        ; if we're tried all the moves, return the best score
        inc     hl
        inc     e

        ld      a, (hl)
        cp      BlankPiece          ; is the board space free?
        jp      nz, MaxLoop

        ld      (hl), XPiece        ; make the move
        push    hl                  ; save the pointer to the board position for restoration later

        push    de                  ; push the move in the lower byte e and value in the upper byte d
        ld      c, (iy + 0)         ; beta
        ld      b, (iy + 1)         ; alpha
        push    bc                  ; push alpha and beta
        
        call    MinMaxMinimize      ; recurse to the min

        pop     bc                  ; restore alpha. beta may have been modified by Minimize.
        pop     de                  ; restore current move into e and value into d
        pop     hl                  ; restore the move location
        ld      (hl), BlankPiece    ; restore a blank on the board
        
        cp      WinScore            ; SCORE - WinScore. If zero, can't do better.
        jp      z, MaxDecDepth

        cp      d                   ; SCORE - VALUE
        jp      z, MaxLoop
        jp      m, MaxLoop

        cp      (iy + 0)            ; compare VALUE with beta
        jp      p, MaxDecDepth      ; beta pruning

        ld      d, a                ; update VALUE with the new best score
        cp      b                   ; compare VALUE with alpha
        jp      z, MaxLoop
        jp      m, MaxLoop

        ld      (iy + 1), a         ; update alpha with VALUE
        jp      MaxLoop

   MaxLoadValue:
        ld      a, d

   MaxDecDepth:
        dec     ix                  ; restore depth
        pop     iy                  ; restore caller's frame pointer
        ret

MinMaxMinimize:                     ; the recursive scoring function. defer frame creation until needed
        ld      hl, (Moves)         ; no 16-bit memory increment, so load in hl for that
        inc     hl
        ld      (Moves), hl

;        ld      a, ixl              ; load depth in a
injectcode2: db 0ddh, 07dh

        cp      4                   ; DEPTH - 4  (if 4 or fewer pieces played, no possible winner)
        jp      m, MinSkipWin

        ld      a, e                ; where the move was taken 0..8
        ld      b, XPiece           ; the piece that took the move
        call    CallScoreProc       ; look for a winning position

        cp      XPiece              ; see if X won
        ld      a, WinScore         ; winning score. avoid branch by always loading
        ret     z

;        ld     a, ixl              ; load depth in a
injectcode3: db 0ddh, 07dh
        cp      8                   ; check for bottom of recursion
        ld      a, TieScore         ; tie score. avoid branch by always loading
        ret     z

  MinSkipWin:
        push    iy                  ; save caller's stack frame
        ld      iy, 4               ; 2 to skip past the return address, 2 for old iy
        add     iy, sp

        ld      d, MaxScore         ; value initialized
        ld      e, 0ffh             ; the variable I will go from 0..8, starting at -1 initially
        ld      hl, Board - 1
        inc     ix                  ; increment depth

  MinLoop:
        ld      a, e
        cp      8
        jp      z, MaxLoadValue        ; if we're tried all the moves, return the best score
        inc     hl
        inc     e

        ld      a, (hl)
        cp      BlankPiece          ; is the board space free?
        jp      nz, MinLoop

        ld      (hl), OPiece        ; make the move
        push    hl                  ; save the pointer to the board position for restoration later

        push    de                  ; push the move in the lower byte e and value in the d
        ld      c, (iy + 0)         ; beta
        ld      b, (iy + 1)         ; alpha
        push    bc                  ; push alpha and beta
        
        call    MinMaxMaximize      ; recurse to the max

        pop     bc                  ; restore beta. alpha may have been modified by Maximize
        pop     de                  ; restore current move into e and value into d
        pop     hl                  ; restore the move location
        ld      (hl), BlankPiece    ; restore a blank on the board
        
        cp      LoseScore           ; SCORE - LoseScore. If zero, can't do better.
        jp      z, MinDecDepth

        cp      d                   ; SCORE - VALUE
        jp      p, MinLoop

        cp      (iy + 1)            ; compare VALUE with alpha
        jp      z, MinDecDepth      ; alpha pruning
        jp      m, MinDecDepth      ; alpha pruning

        ld      d, a                ; update VALUE with the new best score
        cp      c                   ; compare VALUE with beta
        jp      p, MinLoop

        ld      (iy + 0), a         ; update beta with VALUE
        jp      MinLoop

   MinLoadValue:
        ld      a, d

   MinDecDepth:
        dec     ix                  ; restore depth
        pop     iy                  ; restore caller's frame pointer
        ret

DisplayOneCharacter:                ; display the character in a
        push    bc
        push    de
        push    hl

        ld      c, BdosDisplayChar
        ld      e, a
        call    BDOS

        pop     hl
        pop     de
        pop     bc
        ret

DisplayDigit:                       ; Argument # 0-9 is in register B
        push    bc
        push    de
        push    hl

        ld      a, 48
        add     a, b
        call    DisplayOneCharacter

        pop     hl
        pop     de
        pop     bc
        ret

DisplayString:                      ; display null-terminated string pointed to by hl
        push    hl
        push    de
        push    bc

        ld      b, h
        ld      c, l

  DSNext:
        ld      a, (bc)
        cp      0
        jp      z, DSDone
        call    DisplayOneCharacter
        inc     bc
        jp      DSNext

  DSDone:
        pop     bc
        pop     de
        pop     hl
        ret

NegateHL:                           ; negate hl via twos complement -- complement + 1
        ld      a, h
        cpl
        ld      h, a
        ld      a, l
        cpl
        ld      l, a
        inc     hl
        ret

NegateDE:                           ; negate de via twos complement -- complement + 1
        ld      a, d
        cpl
        ld      d, a
        ld      a, e
        cpl
        ld      e, a
        inc     de
        ret

DisplayHL:
        ld      a, h                ; Get the sign bit of the integer,
        rla                         ; which is the top bit of the high byte
        sbc     a, a                ; A=00 if positive, FF if negative
        ld      (NEGF), a           ; Store it as the negative flag
        call    nz, NegateHL        ; And if HL was negative, make it positive
        ld      de, NUM             ; Load pointer to end of number string
        push    de                  ; Onto the stack
        ld      bc, -10             ; Divide by ten (by trial subtraction)
  DhlDigit:
        ld      de, -1              ; DE = quotient. There is no 16-bit subtraction,
  DhlDigitDivide:
        add     hl, bc              ; so we just add a negative value,
        inc     de                   
        jp      c, DhlDigitDivide   ; while that overflows.
        ld      a, '0'+10           ; The loop runs once too much so we're 10 out
        add     a, l                ; The remainder (minus 10) is in L
        ex      (sp), hl            ; Swap HL with top of stack (i.e., the string pointer)
        dec     hl                  ; Go back one byte
        ld      (hl), a             ; And store the digit
        ex      (sp), hl            ; Put the pointer back on the stack
        ex      de, hl              ; Do all of this again with the quotient
        ld      a, h                ; If it is zero, we're done
        or      l
        jp      nz, DhlDigit        ; But if not, there are more digits
        ld      c, BdosPrintString  ; Prepare to call CP/M and print the string
        pop     de                  ; Put the string pointer from the stack in DE
        ld      a, (NEGF)           ; See if the number was supposed to be negative
        inc     a                   
        jp      nz, bdos            ; If not, print the string we have and return
        dec     de                  ; But if so, we need to add a minus in front
        ld      a, '-'              
        ld      (de), a
        jp      bdos                ; And only then print the string. bdos will return to caller

; multiply de by hl, result in hl
; incredibly slow iterative addition.

imul:
        ld      a, l                ; first check if hl is 0 and just return if so
        cp      0
        jp      nz, mul$start
        ld      a, h
        cp      0
        jp      nz, mul$start
        ret

  mul$start:
        push    bc
        ld      b, 80h
        ld      a, h
        and     b
        jp      z, mul$notneg
        call    negatehl
        call    negatede
  mul$notneg:
        push    hl
        pop     bc
        ld      hl, 0
        ld      (mulTmp), hl
  mul$loop:
        add     hl, de
        jp      nc, mul$done
        push    hl
        ld      hl, (mulTmp)
        inc     hl
        ld      (mulTmp), hl
        pop     hl
  mul$done:
        dec     bc
        ld      a, b
        or      c
        jp      nz, mul$loop
        pop     bc
        ret

atou:                               ; in: hl points to string. out: hl has integer value. positive base-10 is assumed
        push    bc
        push    de
        ld      bc, 0               ; running total is in bc

  atouSpaceLoop:                    ; skip past spaces
        ld      a, (hl)
        cp      ' '
        jp      nz, atouNext
        inc     hl
        jp      atouSpaceLoop

  atouNext:
        ld      a, (hl)              ; check if we're at the end of string or the data isn't a number
        cp      '0'
        jp      m, atouDone          ; < '0' isn't a digit
        cp      '9' + 1
        jp      p, atouDone          ; > '9' isn't a digit

        ld      de, 10               ; multiply what we have so far by 10
        push    hl
        ld      h, b
        ld      l, c
        call    imul
        ld      b, h
        ld      c, l
        pop     hl

        ld      a, (hl)              ; restore the digit in a because imul trashed it
        sub     '0'                  ; change ascii to a number
        add     a, c                 ; add this new number to the running total in bc
        ld      c, a
        ld      a, b
        adc     a, 0                 ; if there was a carry from the add, reflect that
        ld      b, a

        inc     hl                   ; move to the next character
        jp      atouNext             ; and process it

  atouDone:
        ld      h, b                 ; the result goes in hl
        ld      l, c
        pop     de
        pop     bc
        ret

; a = the proc to call 0..8
; b = the player who just took a move, O or X

CallScoreProc:
        add     a, a                ; double the move position because function pointers are two bytes
        ld      h, high WinProcs    ; load the pointer to the list of function pointers 0..8

; M80 (unlike ASM) can't deal with symbols defined later.
;        IF HIGH WinProcs NE HIGH AfterWinProcs  ; off by one due to zmac, but check that WinProcs is all in one 256-byte page
;        error error error -- WinProcs needs to all be on one 256-byte page
;        ENDIF
; 
;        IF ( 0 NE ( LOW WinProcs ) )       ; if WinProcs isn't 256-byte aligned. It's a lot slower
;        ld      l, low WinProcs     ; load the low byte of the pointer to the list of function pointers 0..8
;        add     a, l                ; only add the lower-byte since winprocs fits in a single 256-byte page
;        ENDIF
 
        ld      l, a                ; set the offset of the winproc to call
        ld      e, (hl)             ; load the low byte of the proc address
        inc     hl                  ; increment the pointer to the next byte. inx and inr are both 5 cycles.
        ld      d, (hl)             ; load the high byte of the proc address
        ex      de, hl              ; exchange de and hl
        ld      a, b                ; put the player move (X or O) in a
        jp      (hl)                ; move the winner proc address from hl to pc (jump to it)

proc0:
        ld      hl, Board + 1
        cp      (hl)
        jp      nz, proc0nextwin
        inc     hl ; to 2
        cp      (hl)
        ret     z
  proc0nextwin:
        ld      hl, Board + 3
        cp      (hl)
        jp      nz, proc0nextwin2
        ld      hl, Board + 6
        cp      (hl)
        ret     z
  proc0nextwin2:
        ld      hl, Board + 4
        cp      (hl)
        jp      nz, proc0no
        ld      hl, Board + 8
        cp      (hl)
        ret     z
  proc0no:
        xor     a
        ret
        
proc1:
        ld      hl, Board + 0
        cp      (hl)
        jp      nz, proc1nextwin
        ld      hl, Board + 2
        cp      (hl)
        ret     z
  proc1nextwin:
        ld      hl, Board + 4
        cp      (hl)
        jp      nz, proc1no
        ld      hl, Board + 7
        cp      (hl)
        ret     z
  proc1no:
        xor     a
        ret
        
proc2:
        ld      hl, Board + 0
        cp      (hl)
        jp      nz, proc2nextwin
        inc     hl ; to 1
        cp      (hl)
        ret     z
  proc2nextwin:
        ld      hl, Board + 5
        cp      (hl)
        jp      nz, proc2nextwin2
        ld      hl, Board + 8
        cp      (hl)
        ret     z
  proc2nextwin2:
        ld      hl, Board + 4
        cp      (hl)
        jp      nz, proc2no
        ld      hl, Board + 6
        cp      (hl)
        ret     z
  proc2no:
        xor     a
        ret
        
proc3:
        ld      hl, Board + 0
        cp      (hl)
        jp      nz, proc3nextwin
        ld      hl, Board + 6
        cp      (hl)
        ret     z
  proc3nextwin:
        ld      hl, Board + 4
        cp      (hl)
        jp      nz, proc3no
        inc     hl ; to 5
        cp      (hl)
        ret     z
  proc3no:
        xor     a
        ret
        
proc4:
        ld      hl, Board + 0
        cp      (hl)
        jp      nz, proc4nextwin
        ld      hl, Board + 8
        cp      (hl)
        ret     z
  proc4nextwin:
        ld      hl, Board + 2
        cp      (hl)
        jp      nz, proc4nextwin2
        ld      hl, Board + 6
        cp      (hl)
        ret     z
  proc4nextwin2:
        ld      hl, Board + 1
        cp      (hl)
        jp      nz, proc4nextwin3
        ld      hl, Board + 7
        cp      (hl)
        ret     z
  proc4nextwin3:
        ld      hl, Board + 3
        cp      (hl)
        jp      nz, proc4no
        ld      hl, Board + 5
        cp      (hl)
        ret     z
  proc4no:
        xor     a
        ret

proc5:
        ld      hl, Board + 3
        cp      (hl)
        jp      nz, proc5nextwin
        inc     hl ; to 4
        cp      (hl)
        ret     z
  proc5nextwin:
        ld      hl, Board + 2
        cp      (hl)
        jp      nz, proc5no
        ld      hl, Board + 8
        cp      (hl)
        ret     z
  proc5no:
        xor     a
        ret

proc6:
        ld      hl, Board + 4
        cp      (hl)
        jp      nz, proc6nextwin
        ld      hl, Board + 2
        cp      (hl)
        ret     z
  proc6nextwin:
        ld      hl, Board + 0
        cp      (hl)
        jp      nz, proc6nextwin2
        ld      hl, Board + 3
        cp      (hl)
        ret     z
  proc6nextwin2:
        ld      hl, Board + 7
        cp      (hl)
        jp      nz, proc6no
        inc     hl ; to 8
        cp      (hl)
        ret     z
  proc6no:
        xor     a
        ret
        
proc7:
        ld      hl, Board + 1
        cp      (hl)
        jp      nz, proc7nextwin
        ld      hl, Board + 4
        cp      (hl)
        ret     z
  proc7nextwin:
        ld      hl, Board + 6
        cp      (hl)
        jp      nz, proc7no
        ld      hl, Board + 8
        cp      (hl)
        ret     z
  proc7no:
        xor     a
        ret
        
proc8:
        ld      hl, Board + 0
        cp      (hl)
        jp      nz, proc8nextwin
        ld      hl, Board + 4
        cp      (hl)
        ret     z
  proc8nextwin:
        ld      hl, Board + 2
        cp      (hl)
        jp      nz, proc8nextwin2
        ld      hl, Board + 5
        cp      (hl)
        ret     z
  proc8nextwin2:
        ld      hl, Board + 6
        cp      (hl)
        jp      nz, proc8no
        inc     hl ; to 7
        cp      (hl)
        ret     z
  proc8no:
        xor     a
        ret

; These next 4 lines should be consecutive to enable placement of WinProcs to improve performance

DataAfterCode:    db      0              ; Wasted byte to help force alignmentof WinProcs
  org   ( ( DataAfterCode + 0100h ) AND 0ff00h )  ; ensure WinProcs is 256-byte aligned for better performance
WinProcs:         dw      proc0, proc1, proc2, proc3, proc4, proc5, proc6, proc7, proc8
AfterWinProcs:    db      0              ; Wasted byte to validate alignment of WinProcs

NEGF:             db      0              ; Space for negative flag
                  db      '-00000'  
NUM:              db      '$'            ; Space for number. cp/m strings end with a dollar sign
CRLF:             db      13,10,0
StringInvalidArg: db      'iteration argument invalid -- it must be 1 - 32767', 0
StringIterations: db      'iterations: ', 0
StringMoves:      db      'moves:      ', 0
Board:            db      0,0,0,0,0,0,0,0,0
Moves:            dw      0              ; move count
Loops:            dw      DefaultLoops   ; # of iterations to make
Iterations:       dw      0              ; # of iterations so far
mulTmp:           dw      0              ; temporary word used for multiplication

END
